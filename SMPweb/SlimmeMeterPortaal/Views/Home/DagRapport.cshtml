<div class="controller">
    @model SlimmeMeterPortaal.ViewModels.SMP_Report

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
       

    <div class="form-horizontal">
        <h2>
            @Html.DisplayFor(model => model.Message.Title) &nbsp;
        </h2>
        <p>
            @Html.DisplayFor(model => model.Message.Tekst) &nbsp;
        </p>
        <hr />
        <table class="sy-table">
            @if (Model.Devicelijst != null)
            {
                var i = 0;

                foreach (var item in Model.Devicelijst)
                {
                    if (i == 0)
                    {
                        <tr>
                            <th>@Html.DisplayNameFor(modelItem => item.ReportDevice)</th>
                            <th>
                                @Html.DisplayNameFor(modelItem => item.DeviceType)
                            </th>
                            <th>
                                @Html.DisplayNameFor(modelItem => item.DeviceID)
                            </th>
                        </tr>
                    }
                    i = i + 1;
                    <tr>
                        <td>
                            @Html.EditorFor(modelItem => item.ReportDevice, new { htmlAttributes = new { @class = "sy-input" } })
                            @Html.ValidationMessageFor(modelItem => item.ReportDevice, "", new { @class = "text-danger" })
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.DeviceType)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.DeviceID)
                        </td>
                    </tr>

                }
            }
        </table>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <dl class="sy-dl">
            <dt class="sy-dt">
                @Html.LabelFor(model => model.Rapportagedatum)
            </dt>
            <dd class="sy-dd">
                @Html.EditorFor(model => model.Rapportagedatum, new { htmlAttributes = new { @class = "sy-input", @autofocus = "autofocus" } })
                @Html.ValidationMessageFor(model => model.Rapportagedatum, "", new { @class = "text-danger" })
            </dd>
            <dt class="sy-dt">
                @Html.LabelFor(model => model.ReferentieJaren)
            </dt>
            <dd class="sy-dd">
                @Html.EditorFor(model => model.ReferentieJaren, new { htmlAttributes = new { @class = "sy-input40" } })
                @Html.ValidationMessageFor(model => model.ReferentieJaren, "", new { @class = "text-danger" })
            </dd>
            <dt class="sy-dt">
                @Html.LabelFor(model => model.ReferentieDagen)
            </dt>
            <dd class="sy-dd">
                @Html.EditorFor(model => model.ReferentieDagen, new { htmlAttributes = new { @class = "sy-input40" } })
                @Html.ValidationMessageFor(model => model.ReferentieDagen, "", new { @class = "text-danger" })
            </dd>

        </dl>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Refresh" class="sy-button" />
            </div>
        </div>
    </div>
    }
<div>
    <table class="sy-table">
        @if (Model.RPT_lines.Count != 0)
        {
            var i = 0;
            foreach (var item in Model.RPT_lines)
            {
                if ((i == 0) || (i == 26))
                {
                <tr>
                    <th>
                        @Html.DisplayFor(modelItem => item.N)
                    </th>
                    <th>
                        @Html.DisplayFor(modelItem => item.Min)
                    </th >
                    <th>
                        @Html.DisplayFor(modelItem => item.Mean)
                    </th >
                    <th>
                        @Html.DisplayFor(modelItem => item.Max)
                    </th >
                    <th>
                        @Html.DisplayFor(modelItem => item.Label)
                    </th >
                    <th>
                        @Html.DisplayFor(modelItem => item.Dag1)                        
                    </th>
                    <th>
                        @Html.DisplayFor(modelItem => item.Dag2)                       
                    </th>
                    <th>
                        @Html.DisplayFor(modelItem => item.Dag3)                       
                    </th>
                    <th>
                        @Html.DisplayFor(modelItem => item.Dag4)                        
                    </th>
                    <th>
                        @Html.DisplayFor(modelItem => item.Dag5)                        
                    </th>
                    <th>
                        @Html.DisplayFor(modelItem => item.Dag6)                        
                    </th>
                    <th>
                        @Html.DisplayFor(modelItem => item.Dag7)                       
                    </th>
                </tr>
                }
                else
                {
                    <tr >
                        <td >
                            @Html.DisplayFor(modelItem => item.N)
                        </td >
                        <td >
                            @Html.DisplayFor(modelItem => item.Min)
                        </td >
                        <td >
                            @Html.DisplayFor(modelItem => item.Mean)
                        </td >
                        <td >
                            @Html.DisplayFor(modelItem => item.Max)
                        </td >
                        <td >
                            @Html.DisplayFor(modelItem => item.Label)
                        </td >
                        <td class="sy-use">
                            @Html.DisplayFor(modelItem => item.Dag1)
                            @Html.HiddenFor(modelItem => item.Level1, new { @class = "sy-level" })
                        </td>
                        <td class="sy-use">
                            @Html.DisplayFor(modelItem => item.Dag2)
                            @Html.HiddenFor(modelItem => item.Level2, new { @class = "sy-level" })
                        </td>
                        <td class="sy-use">
                            @Html.DisplayFor(modelItem => item.Dag3)
                            @Html.HiddenFor(modelItem => item.Level3, new { @class = "sy-level" })
                        </td>
                        <td class="sy-use">
                            @Html.DisplayFor(modelItem => item.Dag4)
                            @Html.HiddenFor(modelItem => item.Level4, new { @class = "sy-level" })
                        </td>
                        <td class="sy-use">
                            @Html.DisplayFor(modelItem => item.Dag5)
                            @Html.HiddenFor(modelItem => item.Level5, new { @class = "sy-level" })
                        </td>
                        <td class="sy-use">
                            @Html.DisplayFor(modelItem => item.Dag6)
                            @Html.HiddenFor(modelItem => item.Level6, new { @class = "sy-level" })
                        </td>
                        <td class="sy-use">
                            @Html.DisplayFor(modelItem => item.Dag7)
                            @Html.HiddenFor(modelItem => item.Level7, new { @class = "sy-level" })
                        </td>
                    </tr >
                }
                i++;
            }
        }

</table >

</div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
</div>